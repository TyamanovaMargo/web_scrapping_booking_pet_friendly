import pandas as pd
import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, NoSuchElementException

def setup_driver():
    """Setup Chrome WebDriver with options"""
    chrome_options = Options()
    # –£–±–∏—Ä–∞–µ–º headless —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
    # chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")
    
    try:
        from webdriver_manager.chrome import ChromeDriverManager
        from selenium.webdriver.chrome.service import Service
        
        service = Service(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=chrome_options)
        return driver
    except ImportError:
        driver = webdriver.Chrome(options=chrome_options)
        return driver

def simple_pet_check(driver, url, property_name):
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∏—â–µ–º –ª—é–±—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö
    """
    try:
        print(f"   üîç Checking: {property_name}")
        driver.get(url)
        time.sleep(3)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_text = driver.page_source.lower()
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ª–æ–≤–æ pets/animals –∏ –Ω–µ—Ç —è–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–µ—Ç–∞
        has_pet_mention = any(word in page_text for word in [
            'pet', 'dog', 'cat', 'animal', 'puppy', 'kitten'
        ])
        
        has_explicit_ban = any(phrase in page_text for phrase in [
            'no pets', 'pets not allowed', 'no animals'
        ])
        
        print(f"      Pet mention: {has_pet_mention}")
        print(f"      Explicit ban: {has_explicit_ban}")
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –µ—Å–ª–∏ –µ—Å—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏ –Ω–µ—Ç –∑–∞–ø—Ä–µ—Ç–∞ - —Å—á–∏—Ç–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–º
        if has_pet_mention and not has_explicit_ban:
            return True, "Pets likely allowed"
        elif has_explicit_ban:
            return False, "Pets explicitly banned"
        else:
            return False, "No pet policy found"
            
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
        return False, f"Error: {e}"

def scrape_any_pet_friendly_accommodation():
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∫—Ä–∞–ø–µ—Ä - –∏—â–µ–º –ª—é–±—ã–µ –æ–±—ä–µ–∫—Ç—ã —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏
    """
    
    driver = setup_driver()
    found_places = []
    
    try:
        # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –ò–∑—Ä–∞–∏–ª—é —Å pet —Ñ–∏–ª—å—Ç—Ä–æ–º
        search_url = "https://www.booking.com/searchresults.html?ss=Israel&pets=1"
        
        print(f"üîç Searching: {search_url}")
        driver.get(search_url)
        time.sleep(5)
        
        # Handle cookies
        try:
            cookie_button = WebDriverWait(driver, 5).until(
                EC.element_to_be_clickable((By.ID, "onetrust-accept-btn-handler"))
            )
            cookie_button.click()
            time.sleep(2)
        except:
            pass
        
        # –ò—â–µ–º –ª—é–±—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤
        property_selectors = [
            "[data-testid='property-card']",
            ".sr_property_block",
            ".sr_item"
        ]
        
        properties = []
        for selector in property_selectors:
            properties = driver.find_elements(By.CSS_SELECTOR, selector)
            if properties:
                print(f"‚úÖ Found {len(properties)} properties with selector: {selector}")
                break
        
        if not properties:
            print("‚ùå No properties found with any selector")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ –≤–æ–æ–±—â–µ –µ—Å—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            print("Page title:", driver.title)
            print("Current URL:", driver.current_url)
            return []
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10 –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        for i, card in enumerate(properties[:10]):
            try:
                print(f"\n[{i+1}/10] Processing property...")
                
                # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
                name = "Unknown Property"
                name_selectors = [
                    "[data-testid='title']",
                    "h3 a span",
                    ".sr-hotel__name",
                    "h3"
                ]
                
                for selector in name_selectors:
                    try:
                        name_element = card.find_element(By.CSS_SELECTOR, selector)
                        name = name_element.text.strip()
                        if name and len(name) > 3:
                            break
                    except:
                        continue
                
                print(f"   Name: {name}")
                
                # –ò—â–µ–º URL
                url = ""
                url_selectors = [
                    "a[href*='hotel']",
                    "h3 a", 
                    "a"
                ]
                
                for selector in url_selectors:
                    try:
                        link_element = card.find_element(By.CSS_SELECTOR, selector)
                        url = link_element.get_attribute('href')
                        if url and 'booking.com' in url:
                            break
                    except:
                        continue
                
                if not url:
                    print(f"   ‚ö†Ô∏è No URL found")
                    continue
                
                print(f"   URL: {url[:50]}...")
                
                # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                is_pet_friendly, reason = simple_pet_check(driver, url, name)
                
                if is_pet_friendly:
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É
                    driver.back()
                    time.sleep(2)
                    
                    property_data = {
                        'name': name,
                        'location': 'Israel',
                        'description': 'Pet-friendly accommodation in Israel',
                        'pet_policy': reason,
                        'rating': 'Check on site',
                        'price': 'Check on site',
                        'url': url
                    }
                    
                    found_places.append(property_data)
                    print(f"   ‚úÖ ADDED: {name}")
                else:
                    print(f"   ‚ùå REJECTED: {reason}")
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É
                    driver.back()
                    time.sleep(2)
                
            except Exception as e:
                print(f"   ‚ùå Error processing property {i+1}: {e}")
                continue
        
    except Exception as e:
        print(f"‚ùå Main error: {e}")
    finally:
        driver.quit()
    
    return found_places

def main():
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üèïÔ∏è SIMPLIFIED Pet-Friendly Accommodation Finder")
    print("=" * 50)
    
    print("üîç Looking for ANY pet-friendly places in Israel...")
    print("‚ö†Ô∏è Browser will be visible for debugging")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
    places = scrape_any_pet_friendly_accommodation()
    
    if places:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        df = pd.DataFrame(places)
        df.to_csv('simple_pet_friendly_israel.csv', index=False, encoding='utf-8')
        
        print(f"\nüéâ SUCCESS! Found {len(places)} places:")
        for i, place in enumerate(places, 1):
            print(f"{i}. {place['name']}")
        
        print(f"\nüìÅ Saved to: simple_pet_friendly_israel.csv")
    else:
        print("\n‚ùå No places found. Possible issues:")
        print("1. Booking.com changed their structure")
        print("2. No pet-friendly places in Israel")
        print("3. Geo-blocking or captcha")
        print("\nüí° Try running without --headless to see what's happening")

if __name__ == "__main__":
    main()

